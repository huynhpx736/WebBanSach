// // api.js
// import axios from 'axios';

// axios.defaults.baseURL = 'http://localhost:8080';

// export const register = async (username, password, email) => {
//   try {
//     const response = await axios.post('/api/auth/register', {
//       username,
//       password,
//       email
//     });
//     return response.data;
//   } catch (error) {
//     throw new Error('Failed to register.');
//   }
// };

// export const login = async (username, password) => {
//   try {
//     const response = await axios.post('/api/auth/login', {
//       username,
//       password
//     });
//     return response.data;
//   } catch (error) {
//     throw new Error('Failed to login.');
//   }
// };

// export const fetchNewestProducts = async () => {
//   try {
//     const response = await axios.get('/api/products/newest');
//     return response.data.data;
//   } catch (error) {
//     throw new Error('Failed to fetch new books.');
//   }
// };

// export const fetchAllProducts = async () => {
//   try {
//     const response = await axios.get('/api/products/get-all');
//     return response.data.data;
//   } catch (error) {
//     throw new Error('Failed to fetch books.');
//   }
// };

// export const fetchAllCategories = async () => {
//   try {
//     const response = await axios.get('/api/categories/get-all');
//     return response.data.data;
//   } catch (error) {
//     throw new Error('Failed to fetch categories.');
//   }
// };

// export const fetchProductsByCategory = async (categoryId) => {
//   try {
//     const response = await axios.get(`/api/products/category/${categoryId}`);
//     return response.data.data;
//   } catch (error) {
//     throw new Error('Failed to fetch products by category.');
//   }
// };

// export const fetchProductById = async (productId) => {
//   try {
//     const response = await axios.get(`/api/products/${productId}`);
//     return response.data.data;
//   } catch (error) {
//     throw new Error('Failed to fetch product by ID.');
//   }
// };



// export const fetchAllUsers = async () => {
//   try {
//     const response = await axios.get('/api/users/get-all');
//     return response.data.data;
//   } catch (error) {
//     throw new Error('Failed to fetch users.');
//   }
// };

// export const createUser = async (userDTO) => {
//   try {
//     const response = await axios.post('/api/users/create', userDTO);
//     return response.data.data;
//   } catch (error) {
//     throw new Error('Failed to create user.');
//   }
// };


// export const deleteUser = async (id) => {
//   try {
//     await axios.delete(`/api/users/delete/${id}`);
//   } catch (error) {
//     throw new Error('Failed to delete user.');
//   }
// };

// // Fetch user by ID
// export const fetchUserById = async (userId) => {
//   try {
//     const response = await axios.get(`/api/users/${userId}`);
//     return response.data.data;
//   } catch (error) {
//     throw new Error('Failed to fetch user by ID.');
//   }
// };

// // Update user information
// export const updateUser = async (userId, userData) => {
//   try {
//     const response = await axios.put(`/api/users/update/${userId}`, userData);
//     return response.data.data;
//   } catch (error) {
//     throw new Error('Failed to update user information.');
//   }
// };

// // Change user password
// export const changePassword = async (userId, oldPassword, newPassword) => {
//   try {
//     const response = await axios.put(`/api/users/change-password/${userId}`, null, {
//       params: {
//         oldPassword,
//         newPassword
//       }
//     });
//     return response.data.message;
//   } catch (error) {
//     throw new Error('Failed to change password.');
//   }
// };



// // Add product to cart
// export const addProductToCart = async (userId, productId, quantity) => {
//   try {
//     const response = await axios.post('/api/orderdetails/add-to-cart', null, {
//       params: {
//         userId,
//         productId,
//         quantity
//       }
//     });
//     return response.data;
//   } catch (error) {
//     throw new Error('Failed to add product to cart.');
//   }
// };



// // Place order
// export const placeOrder = async (userId, receiverPhone, receiverAddress, receiverName) => {
//   try {
//     const response = await axios.post('/api/orderdetails/place-order', null, {
//       params: {
//         userId,
//         receiverPhone,
//         receiverAddress,
//         receiverName
//       }
//     });
//     return response.data;
//   } catch (error) {
//     throw new Error('Failed to place order.');
//   }
// };



// // Fetch cart items by user ID
// export const fetchCartItems = async (userId) => {
//   try {
//     const response = await axios.get(`/api/orderdetails/get-cart-items/${userId}`);
//     return response.data.data;
//   } catch (error) {
//     throw new Error('Failed to fetch cart items.');
//   }
// };

// // Update cart item quantity
// export const updateCartItemQuantity = async (orderDetailId, newQuantity) => {
//   try {
//     const response = await axios.put(`/api/orderdetails/update-quantity`, null, {
//       params: {
//         idDetailOrder: orderDetailId,
//         newQuantity
//       }
//     });
//     return response.data;
//   } catch (error) {
//     throw new Error('Failed to update cart item quantity.');
//   }
// };

// // Remove product from cart
// export const removeProductFromCart = async (orderDetailId) => {
//   try {
//     await axios.delete(`/api/orderdetails/delete/${orderDetailId}`);
//   } catch (error) {
//     throw new Error('Failed to remove product from cart.');
//   }
// };



// api.js
import axios from 'axios';

axios.defaults.baseURL = 'http://localhost:8080';

// Auth APIs
export const register = async (username, password, email) => {
  try {
    const response = await axios.post('/api/auth/register', {
      username,
      password,
      email
    });
    return response.data;
  } catch (error) {
    throw new Error('Failed to register.');
  }
};

export const login = async (username, password) => {
  try {
    const response = await axios.post('/api/auth/login', {
      username,
      password
    });
    return response.data;
  } catch (error) {
    throw new Error('Failed to login.');
  }
};

// Product APIs
export const fetchNewestProducts = async () => {
  try {
    const response = await axios.get('/api/products/newest');
    return response.data.data;
  } catch (error) {
    throw new Error('Failed to fetch new books.');
  }
};

export const fetchAllProducts = async () => {
  try {
    const response = await axios.get('/api/products/get-all');
    return response.data.data;
  } catch (error) {
    throw new Error('Failed to fetch books.');
  }
};

// export const fetchAllCategories = async () => {
//   try {
//     const response = await axios.get('/api/categories/get-all');
//     return response.data.data;
//   } catch (error) {
//     throw new Error('Failed to fetch categories.');
//   }
// };

export const fetchProductsByCategory = async (categoryId) => {
  try {
    const response = await axios.get(`/api/products/category/${categoryId}`);
    return response.data.data;
  } catch (error) {
    throw new Error('Failed to fetch products by category.');
  }
};

export const fetchProductById = async (productId) => {
  try {
    const response = await axios.get(`/api/products/${productId}`);
    return response.data.data;
  } catch (error) {
    throw new Error('Failed to fetch product by ID.');
  }
};

// User APIs
export const fetchAllUsers = async () => {
  try {
    const response = await axios.get('/api/users/get-all');
    return response.data.data;
  } catch (error) {
    throw new Error('Failed to fetch users.');
  }
};

export const createUser = async (userDTO) => {
  try {
    const response = await axios.post('/api/users/create', userDTO);
    return response.data.data;
  } catch (error) {
    throw new Error('Failed to create user.');
  }
};

export const deleteUser = async (id) => {
  try {
    await axios.delete(`/api/users/delete/${id}`);
  } catch (error) {
    throw new Error('Failed to delete user.');
  }
};

export const fetchUserById = async (userId) => {
  try {
    const response = await axios.get(`/api/users/${userId}`);
    return response.data.data;
  } catch (error) {
    throw new Error('Failed to fetch user by ID.');
  }
};

export const updateUser = async (userId, userData) => {
  try {
    const response = await axios.put(`/api/users/update/${userId}`, userData);
    return response.data.data;
  } catch (error) {
    throw new Error('Failed to update user information.');
  }
};

export const changePassword = async (userId, oldPassword, newPassword) => {
  try {
    const response = await axios.put(`/api/users/change-password/${userId}`, null, {
      params: {
        oldPassword,
        newPassword
      }
    });
    return response.data.message;
  } catch (error) {
    throw new Error('Failed to change password.');
  }
};

// Cart APIs
export const addProductToCart = async (userId, productId, quantity) => {
  try {
    const response = await axios.post('/api/orderdetails/add-to-cart', null, {
      params: {
        userId,
        productId,
        quantity
      }
    });
    return response.data;
  } catch (error) {
    throw new Error('Failed to add product to cart.');
  }
};

export const placeOrder = async (userId, receiverPhone, receiverAddress, receiverName) => {
  try {
    const response = await axios.post('/api/orderdetails/place-order', null, {
      params: {
        userId,
        receiverPhone,
        receiverAddress,
        receiverName
      }
    });
    return response.data;
  } catch (error) {
    throw new Error('Failed to place order.');
  }
};

export const fetchCartItems = async (userId) => {
  try {
    const response = await axios.get(`/api/orderdetails/get-cart-items/${userId}`);
    return response.data.data;
  } catch (error) {
    throw new Error('Failed to fetch cart items.');
  }
};

export const updateCartItemQuantity = async (orderDetailId, newQuantity) => {
  try {
    const response = await axios.put(`/api/orderdetails/update-quantity`, null, {
      params: {
        idDetailOrder: orderDetailId,
        newQuantity
      }
    });
    return response.data;
  } catch (error) {
    throw new Error('Failed to update cart item quantity.');
  }
};

export const removeProductFromCart = async (orderDetailId) => {
  try {
    await axios.delete(`/api/orderdetails/delete/${orderDetailId}`);
  } catch (error) {
    throw new Error('Failed to remove product from cart.');
  }
};

// Order APIs
export const placeUserOrder = async (userId, orderDetails, orderDTO) => {
  try {
    const response = await axios.post(`/api/orders/place`, { userId, orderDetails, orderDTO });
    return response.data.data;
  } catch (error) {
    throw new Error('Failed to place order.');
  }
};

export const updateOrderStatus = async (orderId, status) => {
  try {
    const response = await axios.put(`/api/orders/update-status/${orderId}`, null, {
      params: { status }
    });
    return response.data;
  } catch (error) {
    throw new Error('Failed to update order status.');
  }
};

export const cancelOrder = async (orderId, status) => {
  try {
    const response = await axios.get(`/api/orders/cancel/${orderId}`, {
      params: { status }
    });
    return response.data;
  } catch (error) {
    throw new Error('Failed to cancel order.');
  }
};

export const getOrderByUserAndStatus = async (userId, status) => {
  try {
    const response = await axios.get(`/api/orders/get-by-user-and-status`, {
      params: { userId, status }
    });
    return response.data.data;
  } catch (error) {
    throw new Error('Failed to fetch orders by user and status.');
  }
};

export const getAllOrdersByUserId = async (userId) => {
  try {
    const response = await axios.get(`/api/orders/get-all-by-userid`, {
      params: { userId }
    });
    return response.data.data;
  } catch (error) {
    throw new Error('Failed to fetch all orders by user ID.');
  }
};

export const getAllOrders = async () => {
  try {
    const response = await axios.get(`/api/orders/get-all`);
    return response.data.data;
  } catch (error) {
    throw new Error('Failed to fetch all orders.');
  }
};

export const getOrderById = async (orderId) => {
  try {
    const response = await axios.get(`/api/orders/${orderId}`);
    return response.data.data;
  } catch (error) {
    throw new Error('Failed to fetch order by ID.');
  }
};

export const createOrder = async (orderDTO) => {
  try {
    const response = await axios.post(`/api/orders/create`, orderDTO);
    return response.data.data;
  } catch (error) {
    throw new Error('Failed to create order.');
  }
};

export const updateOrder = async (orderId, orderDTO) => {
  try {
    const response = await axios.put(`/api/orders/update/${orderId}`, orderDTO);
    return response.data.data;
  } catch (error) {
    throw new Error('Failed to update order.');
  }
};

export const deleteOrder = async (orderId) => {
  try {
    await axios.delete(`/api/orders/delete/${orderId}`);
  } catch (error) {
    throw new Error('Failed to delete order.');
  }
};


// Category APIs
export const fetchAllCategories = async () => {
  try {
    const response = await axios.get('/api/categories/get-all');
    return response.data.data;
  } catch (error) {
    throw new Error('Failed to fetch categories.');
  }
};

export const fetchCategoryById = async (id) => {
  try {
    const response = await axios.get(`/api/categories/${id}`);
    return response.data.data;
  } catch (error) {
    throw new Error('Failed to fetch category by ID.');
  }
};

export const createCategory = async (categoryDTO) => {
  try {
    const response = await axios.post('/api/categories/create', categoryDTO);
    return response.data.data;
  } catch (error) {
    throw new Error('Failed to create category.');
  }
};

export const updateCategory = async (id, categoryDTO) => {
  try {
    const response = await axios.put(`/api/categories/update/${id}`, categoryDTO);
    return response.data.data;
  } catch (error) {
    throw new Error('Failed to update category.');
  }
};

export const deleteCategory = async (id) => {
  try {
    await axios.delete(`/api/categories/delete/${id}`);
  } catch (error) {
    throw new Error('Failed to delete category.');
  }
};
